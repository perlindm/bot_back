from flask import Flask, request, jsonify
import requests
from flask_cors import CORS
import os
from dotenv import load_dotenv
import logging
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º Flask
app = Flask(__name__)
CORS(app)

# API-–∫–ª—é—á–∏
RAPIDAPI_KEY = os.getenv("RAPIDAPI_KEY")
if not RAPIDAPI_KEY:
    logging.error("API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ RAPIDAPI_KEY –≤ .env")
    exit(1)

RAPIDAPI_HOST = "skyscanner89.p.rapidapi.com"
FLIGHTS_URL = f"https://{RAPIDAPI_HOST}/flights/one-way/list"
IATA_URL = f"https://{RAPIDAPI_HOST}/airports/auto-complete"

HEADERS = {
    "x-rapidapi-key": RAPIDAPI_KEY,
    "x-rapidapi-host": RAPIDAPI_HOST
}

# üîπ –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–∞ –≤ IATA-–∫–æ–¥
def get_iata_code(city):
    params = {"query": city}
    response = requests.get(IATA_URL, headers=HEADERS, params=params)
    
    if response.status_code == 200:
        data = response.json()
        if data and isinstance(data, list) and len(data) > 0:
            return data[0]["iata"]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç
        else:
            logging.warning(f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤.")
            return None
    else:
        logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IATA-–∫–æ–¥–∞: {response.text}")
        return None

@app.route('/')
def home():
    return "Welcome to Travel Helper! Use /search-flights to find flights."

@app.route('/health', methods=['GET'])
def health():
    return jsonify({"status": "ok"}), 200

@app.route('/search-flights', methods=['GET'])
def search_flights():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        city_from = request.args.get('origin', "").strip()
        city_to = request.args.get('destination', "").strip()
        date = request.args.get('date', "").strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not city_from or not city_to or not date:
            return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å origin, destination –∏ date"}), 400

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ –≤ IATA-–∫–æ–¥—ã
        origin = get_iata_code(city_from) if len(city_from) > 3 else city_from.upper()
        destination = get_iata_code(city_to) if len(city_to) > 3 else city_to.upper()

        if not origin or not destination:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IATA-–∫–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤"}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        try:
            datetime.strptime(date, "%Y-%m-%d")
        except ValueError:
            return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-12-01)."}), 400

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logging.info(f"–ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤: {origin} ‚Üí {destination} ({date})")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        querystring = {
            "origin": origin,
            "destination": destination,
            "date": date,
            "adults": "1",
            "currency": "USD"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Skyscanner API
        response = requests.get(FLIGHTS_URL, headers=HEADERS, params=querystring)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 429:  # Too Many Requests
            logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")
            return jsonify({"error": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 429

        if response.ok:
            data = response.json()
            if "flights" in data:
                return jsonify(data)
            else:
                logging.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data}")
                return jsonify({"error": "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö API"}), 500
        else:
            error_data = response.json()
            error_message = error_data.get("message", "–û—à–∏–±–∫–∞ API")
            logging.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}, {error_message}, –ó–∞–≥–æ–ª–æ–≤–∫–∏: {HEADERS}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {querystring}")
            return jsonify({"error": error_message}), response.status_code

    except Exception as e:
        logging.exception("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
